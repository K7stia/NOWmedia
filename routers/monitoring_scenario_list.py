from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from utils.json_storage import load_scenarios, save_scenarios

router = Router()

@router.callback_query(F.data == "list_scenarios")
async def list_scenarios(callback: CallbackQuery):
    scenarios = load_scenarios()
    if not scenarios:
        await callback.message.edit_text("‚ùóÔ∏è –°—Ü–µ–Ω–∞—Ä—ñ—ó —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"‚úèÔ∏è {name}", callback_data=f"edit_scenario|{name}"),
         InlineKeyboardButton(text="üóë", callback_data=f"delete_scenario|{name}")]
        for name in sorted(scenarios.keys())
    ]
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="monitoring_automation")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("üìã –û–±–µ—Ä—ñ—Ç—å —Å—Ü–µ–Ω–∞—Ä—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("delete_scenario|"))
async def delete_scenario(callback: CallbackQuery):
    name = callback.data.split("|", 1)[1]
    scenarios = load_scenarios()
    if name in scenarios:
        del scenarios[name]
        save_scenarios(scenarios)
        await callback.answer("‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await list_scenarios(callback)

# ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ü–µ–Ω–∞—Ä—ñ—é - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤ flow —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ –¥–∞–Ω–∏–º–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ)
