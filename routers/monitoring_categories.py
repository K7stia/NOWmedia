import re
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from utils.json_storage import load_monitoring_groups, save_monitoring_groups, get_trim_settings, update_trim_settings
from states.monitoring_states import ManualMonitorState
from keyboards.monitoring_keyboards import get_channel_settings_keyboard

router = Router()

class MonitorCategoryState(StatesGroup):
    waiting_name = State()
    waiting_channel = State()
    current_category = State()

def category_created_kb(category_name: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏", callback_data=f"add_cat_channel|{category_name}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="monitoring_categories")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
    ])

def channel_added_kb(category_name: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –∫–∞–Ω–∞–ª", callback_data=f"add_cat_channel|{category_name}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_category|{category_name}")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
    ])

@router.callback_query(F.data == "monitoring_categories")
async def monitoring_categories_menu(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóÇ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ / —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="view_monitoring_categories")],
        [InlineKeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="create_monitoring_category")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="monitoring_menu")]
    ])
    await callback.message.edit_text("üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", reply_markup=kb)



@router.callback_query(F.data == "create_monitoring_category")
async def ask_category_name(callback: CallbackQuery, state: FSMContext):
    await state.set_state(MonitorCategoryState.waiting_name)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:\n\n"
        "‚úÖ –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏:\n"
        "‚Äì –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ (A‚ÄìZ, a‚Äìz)\n"
        "‚Äì —Ü–∏—Ñ—Ä–∏ (0‚Äì9)\n"
        "‚Äì –ø—Ä–æ–±—ñ–ª–∏\n"
        "‚Äì —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏: <code>|</code>, <code>_</code>, <code>:</code>\n\n"
        "‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫—Ä–∞–ø–∫–∏ (.), —Å–ª–µ—à—ñ (/), –ª–∞–ø–∫–∏ —Ç–∞ —ñ–Ω—à—ñ —Å–∏–º–≤–æ–ª–∏.",
        parse_mode="HTML"
    )

@router.message(MonitorCategoryState.waiting_name)
async def process_category_name(message: Message, state: FSMContext):
    import re
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    name_raw = message.text.strip()

    # –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏: —É–∫—Ä/–ª–∞—Ç –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, | _ : -
    allowed_pattern = r"^[a-zA-Z–∞-—è–ê-–Ø—ñ—ó—î“ë–Ü–á–Ñ“ê0-9 |_:.-]+$"

    if not re.fullmatch(allowed_pattern, name_raw):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="create_monitoring_category")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="monitoring_categories")]
        ])
        await message.answer(
            "‚ùóÔ∏è–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏ –≤ –Ω–∞–∑–≤—ñ.\n\n"
            "‚úÖ –î–æ–∑–≤–æ–ª–µ–Ω–æ:\n"
            "‚Äì –ª—ñ—Ç–µ—Ä–∏ (–ª–∞—Ç–∏–Ω–∏—Ü—è / —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞)\n"
            "‚Äì —Ü–∏—Ñ—Ä–∏\n"
            "‚Äì –ø—Ä–æ–±—ñ–ª–∏\n"
            "‚Äì —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏: <code>|</code>, <code>_</code>, <code>:</code>, <code>-</code>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        return

    # –ó–∞–º—ñ–Ω–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤ –Ω–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
    name = name_raw.replace(" ", "_")

    data = load_monitoring_groups()
    if name in data:
        await message.answer("‚ùóÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
    else:
        data[name] = {"channels": [], "skip_seen": True}
        save_monitoring_groups(data)
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è <b>{name}</b> —Å—Ç–≤–æ—Ä–µ–Ω–∞.",
            reply_markup=category_created_kb(name),
            parse_mode="HTML"
        )
    await state.clear()

@router.callback_query(F.data == "view_monitoring_categories")
async def list_categories(callback: CallbackQuery):
    data = load_monitoring_groups()
    if not data:
        await callback.message.edit_text("‚ÑπÔ∏è –©–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"üìÇ {cat}", callback_data=f"edit_category|{cat}")]
        for cat in sorted(data.keys())
    ]
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="monitoring_categories")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("üóÇ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

@router.callback_query(F.data.startswith("edit_category|"))
async def edit_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("|", 1)[1]
    data = load_monitoring_groups()
    category_data = data.get(category, {})
    skip_seen = category_data.get("skip_seen", True)
    channels = category_data.get("channels", [])

    lines = [f"üìÇ <b>{category}</b>", f"–ö–∞–Ω–∞–ª—ñ–≤: <b>{len(channels)}</b>",
             f"üõë –ü—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ: {'‚úÖ' if skip_seen else '‚ùå'}"]
    text = "\n".join(lines)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤", callback_data=f"list_cat_channels|{category}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª", callback_data=f"add_cat_channel|{category}")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ skip_seen", callback_data=f"toggle_skip_seen|{category}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_monitoring_categories")]
    ])
    await state.update_data(current_category=category)
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data.startswith("toggle_skip_seen|"))
async def toggle_skip_seen(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("|", 1)[1]
    data = load_monitoring_groups()
    if category in data:
        data[category]["skip_seen"] = not data[category].get("skip_seen", True)
        save_monitoring_groups(data)
    await edit_category(callback, state)

@router.callback_query(F.data.startswith("add_cat_channel|"))
async def ask_channel_to_add(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("|", 1)[1]
    await state.set_state(MonitorCategoryState.waiting_channel)
    await state.update_data(current_category=category)
    await callback.message.edit_text("üì• –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å @username / ID –∫–∞–Ω–∞–ª—É:")

@router.message(MonitorCategoryState.waiting_channel)
async def process_channel_addition(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    category = data.get("current_category")
    raw = message.text.strip() if message.text else ""

    input_data = None
    if message.forward_from_chat:
        chat = message.forward_from_chat
        input_data = chat.id
    elif raw.startswith("https://t.me/"):
        input_data = "@" + raw.split("https://t.me/")[-1].split("/")[0]
    elif raw.startswith("@") or raw.startswith("-100"):
        input_data = raw

    if not input_data:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–∞–Ω–∞–ª. –ù–∞–¥—ñ—à–ª—ñ—Ç—å @username, ID –∞–±–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    try:
        chat = await bot.get_chat(input_data)
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª. {e}")
        return

    groups = load_monitoring_groups()
    if category not in groups:
        await message.answer("‚ùóÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    new_entry = {
        "id": chat.id,
        "username": f"@{chat.username}" if chat.username else str(chat.id),
        "title": chat.title or str(chat.id),
        "lines_to_trim": 0,
        "trim_phrases": []
    }
    groups[category]["channels"].append(new_entry)
    save_monitoring_groups(groups)

    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª <b>{new_entry['title']}</b> –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category}</b>.",
        reply_markup=channel_added_kb(category),
        parse_mode="HTML"
    )
    await state.clear()

@router.callback_query(F.data.startswith("list_cat_channels|"))
async def list_cat_channels(callback: CallbackQuery):
    category = callback.data.split("|", 1)[1]
    groups = load_monitoring_groups()
    channels = groups.get(category, {}).get("channels", [])

    if not channels:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –î–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="view_monitoring_categories")],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_main")]
        ])
        await callback.message.edit_text(
            f"‚úÖ –ö–∞–Ω–∞–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category}</b>.",
            reply_markup=kb,
            parse_mode="HTML"
        )
        return

    buttons = [
        [InlineKeyboardButton(text=f"‚öôÔ∏è {c['title']}", callback_data=f"channel_settings|{category}|{c['id']}")]
        for c in channels
    ]
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –î–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="view_monitoring_categories")])
    buttons.append([InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_main")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        f"üìã –ö–∞–Ω–∞–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category}</b>:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("remove_cat_channel|"))
async def remove_cat_channel(callback: CallbackQuery):
    _, category, cid = callback.data.split("|")
    groups = load_monitoring_groups()
    if category in groups:
        groups[category]["channels"] = [c for c in groups[category]["channels"] if str(c["id"]) != cid]
        save_monitoring_groups(groups)
    await list_cat_channels(callback)


@router.callback_query(F.data.startswith("confirm_remove_channel|"))
async def confirm_remove_channel(callback: CallbackQuery):
    _, category, cid = callback.data.split("|")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"remove_cat_channel|{category}|{cid}"),
            InlineKeyboardButton(text="‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"list_cat_channels|{category}")
        ]
    ])
    await callback.message.edit_text(
        f"‚ùóÔ∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∫–∞–Ω–∞–ª –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category}</b>?",
        reply_markup=kb,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("channel_settings|"))
async def channel_settings(callback: CallbackQuery):
    _, category, cid = callback.data.split("|")
    settings = get_trim_settings(category, int(cid))

    text = (
        f"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É <b>{cid}</b> —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category}</b>:\n\n"
        f"‚úÇÔ∏è <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –¥–ª—è –æ–±—Ä—ñ–∑–∫–∏</b>: <code>{settings['lines_to_trim']}</code>\n"
        f"üßπ <b>–ö–ª—é—á–æ–≤—ñ —Ñ—Ä–∞–∑–∏</b>: {', '.join(settings['trim_phrases']) or '‚Äî'}"
    )

    kb = get_channel_settings_keyboard(category, cid)
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data.startswith("change_lines|"))
async def change_lines(callback: CallbackQuery, state: FSMContext):
    _, category, cid = callback.data.split("|")
    await state.set_state(ManualMonitorState.editing_trim_lines)
    await state.update_data(category=category, channel_id=int(cid))
    await callback.message.edit_text("‚úÇÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä—ñ–∑–∞—Ç–∏ –∑ –∫—ñ–Ω—Ü—è —Ç–µ–∫—Å—Ç—É:")

@router.message(ManualMonitorState.editing_trim_lines)
async def process_trim_lines(message: Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count < 0 or count > 20:
            raise ValueError("–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–µ —á–∏—Å–ª–æ")
    except:
        await message.answer("‚ùóÔ∏è–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 20.")
        return

    data = await state.get_data()
    category = data["category"]
    channel_id = data["channel_id"]

    update_trim_settings(category, channel_id, lines_to_trim=count)
    await state.clear()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –î–æ –∫–∞–Ω–∞–ª—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data=f"list_cat_channels|{category}")],
        [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_main")]
    ])

    await message.answer(
        "‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.",
        reply_markup=kb
    )


@router.callback_query(F.data.startswith("change_phrases|"))
async def change_phrases(callback: CallbackQuery, state: FSMContext):
    _, category, cid = callback.data.split("|")
    await state.set_state(ManualMonitorState.editing_trim_phrases)
    await state.update_data(category=category, channel_id=int(cid))
    await callback.message.edit_text(
        "üßπ –í–≤–µ–¥—ñ—Ç—å —Ñ—Ä–∞–∑–∏ –¥–ª—è –ø–æ—à—É–∫—É (—Ä–æ–∑–¥—ñ–ª—è–π—Ç–µ –∫–æ–º–∞–º–∏):\n\n"
        "<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥:</i>\n<code>–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å, –Ω–∞—à –∫–∞–Ω–∞–ª, —á–∏—Ç–∞–π—Ç–µ –±—ñ–ª—å—à–µ</code>",
        parse_mode="HTML"
    )

@router.message(ManualMonitorState.editing_trim_phrases)
async def process_trim_phrases(message: Message, state: FSMContext):
    phrases = [p.strip() for p in message.text.split(",") if p.strip()]
    data = await state.get_data()
    category = data["category"]
    channel_id = data["channel_id"]

    update_trim_settings(category, channel_id, trim_phrases=phrases)
    await state.clear()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –î–æ –∫–∞–Ω–∞–ª—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data=f"list_cat_channels|{category}")],
        [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_main")]
    ])

    await message.answer("‚úÖ –§—Ä–∞–∑–∏ –¥–ª—è –æ–±—Ä—ñ–∑–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb)
