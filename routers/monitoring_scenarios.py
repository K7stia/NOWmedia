import os
import openai
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from utils.json_storage import load_monitoring_groups, load_config, load_scenarios
from utils.telethon_fetcher import fetch_posts_for_category
from monitoring_moderation import send_post_to_moderation

router = Router()

openai.api_key = os.getenv("OPENAI_API_KEY")

async def rewrite_text(text: str, style: str) -> str:
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π —Ü–µ–π —Ç–µ–∫—Å—Ç —É —Å—Ç–∏–ª—ñ: {style}"},
                {"role": "user", "content": text}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"[‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ —Ä–µ—Ä–∞–π—Ç—É: {e}]\n{text}"

# üöÄ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É —Å—Ü–µ–Ω–∞—Ä—ñ—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
async def run_monitoring_scenario(bot: Bot, scenario_name: str):
    scenarios = load_scenarios()
    config = load_config()
    style = config.get("rewrite_style", "–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π —Ü–µ–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª—É")

    scenario = scenarios.get(scenario_name)
    if not scenario:
        print(f"‚ùå –°—Ü–µ–Ω–∞—Ä—ñ–π '{scenario_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    category = scenario.get("category")
    model = scenario.get("model")
    output_channel = scenario.get("output_channel")
    moderation = scenario.get("moderation", True)
    rewrite = scenario.get("rewrite", False)

    groups = load_monitoring_groups()
    channels = groups.get(category, {}).get("channels", [])
    posts = await fetch_posts_for_category(channels)

    if not posts:
        print(f"‚ùå –ù–µ–º–∞—î –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}'")
        return

    top = posts[0]

    if rewrite:
        top["text"] = await rewrite_text(top["text"], style)

    if moderation:
        await send_post_to_moderation(bot, top, output_channel, category, model)
        print(f"üì® –ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –¥–ª—è '{output_channel}'")
        return

    try:
        await bot.send_message(chat_id=output_channel, text=top["text"], parse_mode="HTML")
        print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É {output_channel}")
    except Exception as e:
        print(f"‚ùóÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç: {e}")

# üìã –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ —ñ –∑–∞–ø—É—Å–∫—É –≤—Ä—É—á–Ω—É
@router.callback_query(F.data == "run_scenario")
async def show_scenarios(callback: CallbackQuery):
    scenarios = load_scenarios()
    if not scenarios:
        await callback.message.edit_text("‚ùóÔ∏è –ù–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"‚ñ∂Ô∏è {name}", callback_data=f"launch_scenario|{name}")]
        for name in sorted(scenarios.keys())
    ]
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="monitoring_menu")])
    await callback.message.edit_text("üìã –°—Ü–µ–Ω–∞—Ä—ñ—ó –¥–ª—è –∑–∞–ø—É—Å–∫—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data.startswith("launch_scenario|"))
async def launch_scenario(callback: CallbackQuery, bot: Bot):
    name = callback.data.split("|", 1)[1]
    await callback.message.edit_text(f"‚è≥ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä—ñ—é <b>{name}</b>...", parse_mode="HTML")
    await run_monitoring_scenario(bot, name)
    await callback.message.edit_text(f"‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π <b>{name}</b> –≤–∏–∫–æ–Ω–∞–Ω–æ.", parse_mode="HTML")
