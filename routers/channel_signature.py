import logging
import html
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states.signature import SignatureState
from utils.json_storage import (
    load_channel_signature,
    save_channel_signature,
    delete_channel_signature,
    load_known_media,
    save_known_media
)

router = Router()


@router.callback_query(F.data.startswith("channel_menu|"))
async def channel_menu(callback: CallbackQuery):
    key = callback.data.split("|", 1)[1]
    known = load_known_media()

    channel_data = known.get(key)
    if channel_data and channel_data.get("platform") == "telegram":
        channel_id = str(channel_data.get("id", key))
        display_name = channel_data.get("title", channel_id)
    else:
        channel_id = key
        display_name = key

    info = load_channel_signature(channel_id)
    signature = info.get("signature")
    enabled = info.get("enabled", True)

    buttons = []
    if not signature:
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å", callback_data=f"add_signature|{channel_id}")])
    else:
        toggle = "‚úÖ –ü—ñ–¥–ø–∏—Å –¥–æ–¥–∞—î—Ç—å—Å—è" if enabled else "‚ùå –ü—ñ–¥–ø–∏—Å –Ω–µ –¥–æ–¥–∞—î—Ç—å—Å—è"
        buttons.append([InlineKeyboardButton(text=toggle, callback_data=f"toggle_signature|{channel_id}")])
        buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å", callback_data=f"edit_signature|{channel_id}")])
        buttons.append([InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å", callback_data=f"delete_signature|{channel_id}")])

    buttons.append([InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data=f"confirm_delete_channel|{channel_id}")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_channels")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(f"üîê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è <b>{html.escape(display_name)}</b>:", reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("add_signature|"))
async def add_signature(callback: CallbackQuery, state: FSMContext):
    channel_id = callback.data.split("|", 1)[1]
    await state.set_state(SignatureState.waiting_signature)
    await state.update_data(channel_id=channel_id)
    await callback.message.edit_text(
        f"‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è –∫–∞–Ω–∞–ª—É ID <code>{channel_id}</code>:\n\n"
        "<b>–ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:</b>\n"
        "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω–∏–π&lt;/b&gt;</code>\n"
        "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "‚Ä¢ <code>&lt;a href='https://example.com'&gt;–ª—ñ–Ω–∫&lt;/a&gt;</code>\n\n"
        "‚ùóÔ∏è–ü—ñ–¥–ø–∏—Å –±—É–¥–µ –¥–æ–¥–∞–Ω–∏–π –≤ –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ",
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("edit_signature|"))
async def edit_signature(callback: CallbackQuery, state: FSMContext):
    channel_id = callback.data.split("|", 1)[1]
    current = load_channel_signature(channel_id).get("signature", "(–ø–æ—Ä–æ–∂–Ω—ñ–π)")
    await state.set_state(SignatureState.waiting_signature)
    await state.update_data(channel_id=channel_id)
    await callback.message.edit_text(
        f"‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è –∫–∞–Ω–∞–ª—É ID <code>{channel_id}</code>:\n\n"
        f"<b>–ü–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥–ø–∏—Å:</b>\n<code>{html.escape(current)}</code>\n\n"
        "<b>–ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:</b>\n"
        "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω–∏–π&lt;/b&gt;</code>\n"
        "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "‚Ä¢ <code>&lt;a href='https://example.com'&gt;–ª—ñ–Ω–∫&lt;/a&gt;</code>\n\n"
        "‚ùóÔ∏è–ü—ñ–¥–ø–∏—Å –±—É–¥–µ –¥–æ–¥–∞–Ω–∏–π –≤ –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ",
        parse_mode="HTML"
    )


@router.message(SignatureState.waiting_signature)
async def process_signature_input(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    channel_id = data.get("channel_id")
    save_channel_signature(channel_id, text)

    known = load_known_media()
    display_name = known.get(str(channel_id), {}).get("title", str(channel_id))

    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –î–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–∞–Ω–∞–ª—É", callback_data=f"channel_menu|{channel_id}")],
        [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    await message.answer(
        f"‚úÖ –ü—ñ–¥–ø–∏—Å –¥–ª—è <b>{html.escape(display_name)}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n"
        f"<i>–ù–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å:</i>\n<code>{html.escape(text)}</code>",
        reply_markup=kb,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("toggle_signature|"))
async def toggle_signature(callback: CallbackQuery):
    channel_id = callback.data.split("|", 1)[1]
    info = load_channel_signature(channel_id)
    info["enabled"] = not info.get("enabled", True)
    save_channel_signature(channel_id, info.get("signature", ""), info["enabled"])
    await channel_menu(callback)


@router.callback_query(F.data.startswith("delete_signature|"))
async def delete_signature(callback: CallbackQuery):
    channel_id = callback.data.split("|", 1)[1]
    delete_channel_signature(channel_id)
    await channel_menu(callback)


@router.callback_query(F.data.startswith("confirm_delete_channel|"))
async def confirm_delete_channel(callback: CallbackQuery):
    channel_id = callback.data.split("|", 1)[1]
    known = load_known_media()
    display_name = known.get(str(channel_id), {}).get("title", channel_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üóë –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_channel|{channel_id}"),
            InlineKeyboardButton(text="‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"channel_menu|{channel_id}")
        ]
    ])
    await callback.message.edit_text(f"‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª <b>{html.escape(display_name)}</b>?", reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("delete_channel|"))
async def delete_channel(callback: CallbackQuery):
    channel_id = callback.data.split("|", 1)[1]
    known = load_known_media()
    if channel_id in known:
        known.pop(channel_id)
        save_known_media(known)
        delete_channel_signature(channel_id)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –î–æ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤", callback_data="view_channels")],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        await callback.message.edit_text(f"üóë –ö–∞–Ω–∞–ª ID <b>{channel_id}</b> –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –≤—ñ–¥–æ–º–∏—Ö.", reply_markup=kb, parse_mode="HTML")
    else:
        await callback.message.edit_text(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª ID <b>{channel_id}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É.", parse_mode="HTML")
