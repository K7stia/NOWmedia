from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from utils.access_control import load_allowed_users, add_user, remove_user, SUPER_ADMIN_ID

router = Router()

class AdminState(StatesGroup):
    waiting_user_id = State()

@router.callback_query(F.data == "admin_menu")
async def open_admin_menu(callback: CallbackQuery):
    users = load_allowed_users()
    buttons = [
        [InlineKeyboardButton(text=f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {uid}", callback_data=f"remove_user|{uid}")]
        for uid in users if uid != SUPER_ADMIN_ID
    ]
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ ID", callback_data="add_user")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])

    await callback.message.edit_text("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data == "add_user")
async def add_user_prompt(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.waiting_user_id)
    await callback.message.edit_text(
        "üë§ –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –¥–æ—Å—Ç—É–ø—É:\n\n"
        "‚Ä¢ –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "‚Ä¢ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å @username\n"
        "‚Ä¢ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å Telegram ID"
    )

@router.message(AdminState.waiting_user_id)
async def process_user_id(message: Message, state: FSMContext):
    # –ì–æ—Ç–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    reply_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="add_user")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")]
    ])

    # –Ø–∫—â–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –¥–æ–¥–∞—î–º–æ forward_from
    if message.forward_from:
        user = message.forward_from
        user_id = user.id
        add_user(user_id)
        await message.answer(
            f"‚úÖ –î–æ–¥–∞–Ω–æ: {user.username or '–ë–µ–∑ username'} (ID: {user_id}) —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            reply_markup=reply_kb
        )
        await state.clear()
        return

    raw = message.text.strip()

    if raw.startswith("@"):
        try:
            chat = await message.bot.get_chat(raw)
            if chat.type != "private":
                await message.answer("‚ùóÔ∏è –¶–µ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á. –í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
                await state.clear()
                return

            user_id = chat.id
            add_user(user_id)
            await message.answer(
                f"‚úÖ –î–æ–¥–∞–Ω–æ: {chat.username or '–ë–µ–∑ username'} (ID: {user_id})",
                reply_markup=reply_kb
            )
        except Exception:
            await message.answer(
                "‚ùóÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑–∞ username.\n"
                "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
                "‚Äì –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø–∏—Å–∞–≤ –±–æ—Ç—É\n"
                "‚Äì Username –≤–≤–µ–¥–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é\n\n"
                "–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –±–æ—Ç—É."
            )
    else:
        try:
            user_id = int(raw)
            add_user(user_id)
            await message.answer(
                f"‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {user_id}",
                reply_markup=reply_kb
            )
        except ValueError:
            await message.answer("‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å @username, ID –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    await state.clear()

@router.callback_query(F.data.startswith("remove_user|"))
async def remove_user_callback(callback: CallbackQuery):
    user_id = int(callback.data.split("|")[1])
    remove_user(user_id)
    await open_admin_menu(callback)
